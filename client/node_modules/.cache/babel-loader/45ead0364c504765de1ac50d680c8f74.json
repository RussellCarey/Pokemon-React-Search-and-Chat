{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/React/MY PROJECTS/pokesimple/client/src/context/chat/ChatState.js\",\n    _s = $RefreshSig$();\n\nimport { NEW_MESSAGE, SEND_MESSAGE } from \"../types\";\nimport React, { useReducer } from \"react\";\nimport ChatContext from \"./ChatContext\";\nimport ChatReducer from \"./ChatReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatState = props => {\n  _s();\n\n  const initialState = {\n    messamsgges: [{\n      name: \"Test\",\n      message: \"MESSGE TESTTTT HARDOCDED\"\n    }]\n  }; //? Array is the state and dispatch (current state and action(what we call to edit the state))\n  //? ContactReducer ... Is the switch statement that takes in a COMMAND FROM the array second arguement.\n\n  const [state, dispatch] = useReducer(ChatReducer, initialState);\n\n  const onMessage = message => {\n    console.log(\"State recieved a new message\" + message);\n    dispatch({\n      type: NEW_MESSAGE,\n      payload: message\n    });\n  }; // const getPokemon = async (number) => {\n  //   const data = await fetch(`https://pokeapi.co/api/v2/pokemon/${number}`);\n  //   const json = await data.json();\n  //   const pokemon = {\n  //     id: json.id,\n  //     name: Capitalise(json.name),\n  //     sprite: json.sprites.other[\"official-artwork\"].front_default,\n  //     types: json.types,\n  //     hp: json.stats[0].base_stat,\n  //     attack: json.stats[1].base_stat,\n  //     defence: json.stats[2].base_stat,\n  //     special_attack: json.stats[3].base_stat,\n  //     special_defence: json.stats[4].base_stat,\n  //     speed: json.stats[5].base_stat,\n  //     color: \"\",\n  //   };\n  //   dispatch({ type: NEW_POKEMON, payload: pokemon });\n  // };\n  // async function getNewColor() {\n  //   const colorThief = new ColorThief();\n  //   const img = document.getElementById(\"pokemonimg\");\n  //   img.crossOrigin = \"Anonymous\";\n  //   try {\n  //     if (img) {\n  //       const color = await colorThief.getColor(img, 10);\n  //       if (color[0] < 60 && color[1] < 60) {\n  //         color[0] = 240;\n  //         color[1] = 232 - 15;\n  //         color[2] = 186 - 70;\n  //       }\n  //       dispatch({ type: SET_COLOR, payload: color });\n  //       img.style.opacity = \"100%\";\n  //     }\n  //   } catch (error) {}\n  // }\n  //! Returns the provider with its value - then props.children is just anything else added in betweem.\n\n\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      messages: state.messages,\n      onMessage // loading: state.loading,\n      // color: state.color,\n      // getNewColor,\n      // getPokemon,\n\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = ChatState;\nexport default ChatState;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatState\");","map":{"version":3,"sources":["/Users/r/Desktop/React/MY PROJECTS/pokesimple/client/src/context/chat/ChatState.js"],"names":["NEW_MESSAGE","SEND_MESSAGE","React","useReducer","ChatContext","ChatReducer","ChatState","props","initialState","messamsgges","name","message","state","dispatch","onMessage","console","log","type","payload","messages","children"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,YAAtB,QAA0C,UAA1C;AAEA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAMC,YAAY,GAAG;AACnBC,IAAAA,WAAW,EAAE,CAAC;AAAEC,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,OAAO,EAAE;AAAzB,KAAD;AADM,GAArB,CAD2B,CAK3B;AACA;;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,UAAU,CAACE,WAAD,EAAcG,YAAd,CAApC;;AAEA,QAAMM,SAAS,GAAIH,OAAD,IAAa;AAC7BI,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCL,OAA7C;AACAE,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEjB,WAAR;AAAqBkB,MAAAA,OAAO,EAAEP;AAA9B,KAAD,CAAR;AACD,GAHD,CAT2B,CAc3B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AACA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLQ,MAAAA,QAAQ,EAAEP,KAAK,CAACO,QADX;AAELL,MAAAA,SAFK,CAGL;AACA;AACA;AACA;;AANK,KADT;AAAA,cAUGP,KAAK,CAACa;AAVT;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAtED;;GAAMd,S;;KAAAA,S;AAwEN,eAAeA,SAAf","sourcesContent":["import { NEW_MESSAGE, SEND_MESSAGE } from \"../types\";\n\nimport React, { useReducer } from \"react\";\nimport ChatContext from \"./ChatContext\";\nimport ChatReducer from \"./ChatReducer\";\n\nconst ChatState = (props) => {\n  const initialState = {\n    messamsgges: [{ name: \"Test\", message: \"MESSGE TESTTTT HARDOCDED\" }],\n  };\n\n  //? Array is the state and dispatch (current state and action(what we call to edit the state))\n  //? ContactReducer ... Is the switch statement that takes in a COMMAND FROM the array second arguement.\n  const [state, dispatch] = useReducer(ChatReducer, initialState);\n\n  const onMessage = (message) => {\n    console.log(\"State recieved a new message\" + message);\n    dispatch({ type: NEW_MESSAGE, payload: message });\n  };\n\n  // const getPokemon = async (number) => {\n  //   const data = await fetch(`https://pokeapi.co/api/v2/pokemon/${number}`);\n  //   const json = await data.json();\n\n  //   const pokemon = {\n  //     id: json.id,\n  //     name: Capitalise(json.name),\n  //     sprite: json.sprites.other[\"official-artwork\"].front_default,\n  //     types: json.types,\n  //     hp: json.stats[0].base_stat,\n  //     attack: json.stats[1].base_stat,\n  //     defence: json.stats[2].base_stat,\n  //     special_attack: json.stats[3].base_stat,\n  //     special_defence: json.stats[4].base_stat,\n  //     speed: json.stats[5].base_stat,\n  //     color: \"\",\n  //   };\n\n  //   dispatch({ type: NEW_POKEMON, payload: pokemon });\n  // };\n\n  // async function getNewColor() {\n  //   const colorThief = new ColorThief();\n  //   const img = document.getElementById(\"pokemonimg\");\n  //   img.crossOrigin = \"Anonymous\";\n\n  //   try {\n  //     if (img) {\n  //       const color = await colorThief.getColor(img, 10);\n  //       if (color[0] < 60 && color[1] < 60) {\n  //         color[0] = 240;\n  //         color[1] = 232 - 15;\n  //         color[2] = 186 - 70;\n  //       }\n\n  //       dispatch({ type: SET_COLOR, payload: color });\n  //       img.style.opacity = \"100%\";\n  //     }\n  //   } catch (error) {}\n  // }\n\n  //! Returns the provider with its value - then props.children is just anything else added in betweem.\n  return (\n    <ChatContext.Provider\n      value={{\n        messages: state.messages,\n        onMessage,\n        // loading: state.loading,\n        // color: state.color,\n        // getNewColor,\n        // getPokemon,\n      }}\n    >\n      {props.children}\n    </ChatContext.Provider>\n  );\n};\n\nexport default ChatState;\n"]},"metadata":{},"sourceType":"module"}