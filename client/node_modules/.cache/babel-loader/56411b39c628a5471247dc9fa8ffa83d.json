{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/React/MY PROJECTS/pokesimple/client/src/context/chat/ChatState.js\",\n    _s = $RefreshSig$();\n\nimport { NEW_MESSAGE, SEND_MESSAGE } from \"../types\";\nimport React, { useReducer } from \"react\";\nimport ChatContext from \"./ChatContext\";\nimport ChatReducer from \"./ChatReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatState = props => {\n  _s();\n\n  const initialState = {\n    messages: [{\n      name: \"Test\",\n      message: \"MESSGE TESTTTT HARDOCDED\"\n    }]\n  };\n  const [state, dispatch] = useReducer(ChatReducer, initialState);\n\n  const onMessage = message => {\n    console.log(\"State recieved a new message\" + message);\n    dispatch({\n      type: NEW_MESSAGE,\n      payload: message\n    });\n  }; //! Returns the provider with its value - then props.children is just anything else added in betweem.\n\n\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      messages: state.messages,\n      onMessage\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = ChatState;\nexport default ChatState;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatState\");","map":{"version":3,"sources":["/Users/r/Desktop/React/MY PROJECTS/pokesimple/client/src/context/chat/ChatState.js"],"names":["NEW_MESSAGE","SEND_MESSAGE","React","useReducer","ChatContext","ChatReducer","ChatState","props","initialState","messages","name","message","state","dispatch","onMessage","console","log","type","payload","children"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,YAAtB,QAA0C,UAA1C;AAEA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAMC,YAAY,GAAG;AACnBC,IAAAA,QAAQ,EAAE,CAAC;AAAEC,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,OAAO,EAAE;AAAzB,KAAD;AADS,GAArB;AAIA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,UAAU,CAACE,WAAD,EAAcG,YAAd,CAApC;;AAEA,QAAMM,SAAS,GAAIH,OAAD,IAAa;AAC7BI,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCL,OAA7C;AACAE,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEjB,WAAR;AAAqBkB,MAAAA,OAAO,EAAEP;AAA9B,KAAD,CAAR;AACD,GAHD,CAP2B,CAY3B;;;AACA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLF,MAAAA,QAAQ,EAAEG,KAAK,CAACH,QADX;AAELK,MAAAA;AAFK,KADT;AAAA,cAMGP,KAAK,CAACY;AANT;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAvBD;;GAAMb,S;;KAAAA,S;AAyBN,eAAeA,SAAf","sourcesContent":["import { NEW_MESSAGE, SEND_MESSAGE } from \"../types\";\n\nimport React, { useReducer } from \"react\";\nimport ChatContext from \"./ChatContext\";\nimport ChatReducer from \"./ChatReducer\";\n\nconst ChatState = (props) => {\n  const initialState = {\n    messages: [{ name: \"Test\", message: \"MESSGE TESTTTT HARDOCDED\" }],\n  };\n\n  const [state, dispatch] = useReducer(ChatReducer, initialState);\n\n  const onMessage = (message) => {\n    console.log(\"State recieved a new message\" + message);\n    dispatch({ type: NEW_MESSAGE, payload: message });\n  };\n\n  //! Returns the provider with its value - then props.children is just anything else added in betweem.\n  return (\n    <ChatContext.Provider\n      value={{\n        messages: state.messages,\n        onMessage,\n      }}\n    >\n      {props.children}\n    </ChatContext.Provider>\n  );\n};\n\nexport default ChatState;\n"]},"metadata":{},"sourceType":"module"}